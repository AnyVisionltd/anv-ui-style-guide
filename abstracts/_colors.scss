$color-palate: (
  primary: #3e7afc,
  secondary: #02234b,
  accent: #19e7fc,
  decorative: #f43aac,
  purewhite: #ffffff,
  trueblack: #010a14,
  surface: #02244d,
  content: #021d3d,
  success: #00d0a0,
  alert: #ffc400,
  error: #d50000,
  ac-sirius: #55efc4,
  ac-canopus: #81ecec,
  ac-vega: #74b9ff,
  ac-rigel: #a29bfe,
  ac-earth: #00b894,
  ac-achernar: #00cec9,
  ac-betelgeuse: #0984e3,
  ac-agena: #6c5ce7,
  ac-spica: #fd79a8,
  ac-aldebaran: #ff7675,
  ac-altair: #fab1a0,
  ac-procyon: #ffeaa7,
  ac-mimosa: #ffeaa7,
  ac-pollux: #d63031,
  ac-antares: #e17055,
  ac-sun: #fdcb6e
) !default;

// Set :export to share variables with JS
:export {
  @each $key, $value in $color-palate {
    #{$key}: $value;
  }
}

// This function will manage to return a color by given key.
// @param $key: The color key in the $color-palate.
// @param $opacity: If has opacity the color will return as rgba.
// @return color as HEX or RGBA.
@function av-color($key, $opacity: false) {
  $value: map-get($color-palate, $key);
  @if ($value) {
    @if($opacity) {
     @return var(set-as-var($key), rgba($value, $opacity));
    }
    @return var(set-as-var($key), $value);
  } @else {
    $error: 'Given type is `#{$key}` please use `#{map-keys($color-palate)}`';
    @error $error;
  }
}
